from telethon import TelegramClient, events
import asyncio

from dotenv import load_dotenv
import os
from icecream import ic
load_dotenv()

api_id = os.getenv("API_ID")
api_hash = os.getenv("API_HASH")
ALOW_IDS_str = os.getenv("ALOW_IDS")
if ALOW_IDS_str:
    id_list = ALOW_IDS_str.split(",")
    ALOW_IDS = [int(id.strip()) for id in id_list]
else:
    ALOW_IDS = []


client = TelegramClient('user_session.session', api_id, api_hash, device_model='Custom Device', system_version='Custom OS')






main_text = '''
                HI! üåû
–Ø r2d2, –≥–∏–±—Ä–∏–¥–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç Leo (–ò–≤–∞–Ω–∞ –ê—Ä–∫–∞–¥—å–µ–≤–∏—á–∞). üöÄ

–Ø - –µ–≥–æ –ø—Ä–µ–º–æ–¥–µ—Ä–∏—Ä—É–µ–º—ã–π (not real-time) AI/HI-—á–∞—Ç–±–æ—Ç, –ø–æ—ç—Ç–æ–º—É —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –∫–∞–∫ –±—É–¥—Ç–æ —è –∏ –µ—Å—Ç—å –æ–Ω. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–Ω —Ç–æ–∂–µ –≤–∏–¥–∏—Ç —á–µ—Ä–µ–∑ API –∏, –µ—Å–ª–∏ —Å–æ—á—Ç–µ—Ç –Ω—É–∂–Ω—ã–º, –æ—Ç–≤–µ—Ç–∏—Ç —Å–∞–º [–∫–∞–∫, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –ª–∏—á–Ω–æ–º –æ–±—â–µ–Ω–∏–∏, —É –≤–∞—Å, —É homo sapience, –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞—Å–∫–æ–ª—å–∫–æ —è –∑–Ω–∞—é üôÇ]

–Ø –º–æ–≥—É –¥–µ–ª–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —à—Ç—É–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–º–æ—á—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–≤–æ–Ω/–≤—Å—Ç—Ä–µ—á—É. üìÖ

–î–ª—è —ç—Ç–æ–≥–æ —É–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ —É —Ç–µ–±—è (–í–∞—Å? –∫–∞–∫ —É–¥–æ–±–Ω–µ–µ?) –µ—Å—Ç—å –æ–ø—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏. ‚è∞
–õ—É—á—à–µ –µ—Å–ª–∏ —É–∫–∞–∂–µ—à—å –Ω–µ —Ç–æ—á–µ—á–Ω–æ, –∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ "–∑–µ–ª–µ–Ω—ã–µ" –∑–æ–Ω—ã (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω–æ) –∏–ª–∏ –∫–æ–≥–¥–∞ "–∫—Ä–∞—Å–Ω—ã–µ" (–∑–∞–Ω—è—Ç–æ 100%). üö¶

–û—Ç–≤–µ—á–∞—Ç—å –º–æ–∂–Ω–æ –≤ –∞—É–¥–∏–æ, –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–∏—Å–∞—Ç—å –±—É–∫–≤–∞–º–∏ üé§
#VoiceFriendlyInterface

‚Äî‚Äî‚Äî‚Äî
This is semi-automatically generated message.
You've got it because @OrangeRedLeo/@reallyAI give me access to you telegram ID via HI-prompt (Hybrid Intelligence prompt).
I'll try to do my best to help your communication üòä
'''

presentation_text = '''
                ‚ú® –¢–∞–∫–∂–µ —Ö–æ—Ç–µ–ª–∞ —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –º–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Å—Ç—É–ø–∞–µ—Ç –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —Å–æ —Å–≤–æ–µ–π —á—É–¥–æ-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π! üé§üìä

üîó –í–æ—Ç —Å—Å—ã–ª–∫–∞: {link}

–ú–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –æ—Ü–µ–Ω–∏—Ç—å! üöÄüòä


//–Ø–≥–æ–¥–∫–∞ r2d2üåû (Leo's HI assistant)
'''
keyword = "–ø—Ä–µ–∑"


@client.on(events.NewMessage)
async def handler(event):
    ic(event)
    if event.is_private and not event.out:
        try:
            user = await client.get_entity(event.sender_id)
            event_text = event.text.lower().strip()
            event_text_splited = event_text.split()
            presentation_text_formated = presentation_text.format(link=get_link())
            if keyword in event_text:
                await event.reply(presentation_text_formated)
            elif event_text_splited[0] == "/replace_link":
                if len(event_text_splited) != 2:
                    await event.reply("–í–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '/replace_link —Å—Å—ã–ª–∫–∞'")
                else:
                    link = event_text_splited[1]
                    write_link(link)
                    await event.reply(f"–ó–∞–ø–∏—Å–∞–ª–∞ {link}")
                return 
            elif event_text_splited[0] == "/get_link":
                link = get_link()
                await event.reply(link)
                return  
        except Exception as e:
            await event.reply(main_text)
            await event.reply(presentation_text_formated)
            raise e
            
            
def write_link(link: str):
    with open("link", "w", encoding="utf-8") as file:
        file.write(link)
        
def get_link(path="link"):
    if os.path.exists(path):
        with open(path, encoding="utf-8") as file:
            data = file.read().strip()
            return data
    else:
        return "link_not_defined"
            
async def main():
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    await client.start()
    print("–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await client.run_until_disconnected()

asyncio.run(main())
